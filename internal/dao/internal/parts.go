// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// PartsDao is the data access object for table parts.
type PartsDao struct {
	table   string       // table is the underlying table name of the DAO.
	group   string       // group is the database configuration group name of current DAO.
	columns PartsColumns // columns contains all the column names of Table for convenient usage.
}

// PartsColumns defines and stores column names for table parts.
type PartsColumns struct {
	Id         string //
	TaskId     string //
	PartNum    string //
	ContentMd5 string //
	Etag       string //
	Status     string //
}

//  partsColumns holds the columns for table parts.
var partsColumns = PartsColumns{
	Id:         "id",
	TaskId:     "task_id",
	PartNum:    "part_num",
	ContentMd5: "content_md5",
	Etag:       "etag",
	Status:     "status",
}

// NewPartsDao creates and returns a new DAO object for table data access.
func NewPartsDao() *PartsDao {
	return &PartsDao{
		group:   "default",
		table:   "parts",
		columns: partsColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *PartsDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *PartsDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *PartsDao) Columns() PartsColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *PartsDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *PartsDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *PartsDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
